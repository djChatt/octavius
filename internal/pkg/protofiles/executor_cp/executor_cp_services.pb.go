// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.12.3
// source: internal/pkg/protofiles/executor_cp/executor_cp_services.proto

package executor_cp

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

var File_internal_pkg_protofiles_executor_cp_executor_cp_services_proto protoreflect.FileDescriptor

var file_internal_pkg_protofiles_executor_cp_executor_cp_services_proto_rawDesc = []byte{
	0x0a, 0x3e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x6f, 0x72, 0x5f, 0x63, 0x70, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63,
	0x70, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x36, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x6f, 0x72, 0x5f, 0x63, 0x70, 0x2f, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x3a, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x73, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x70, 0x2f, 0x72, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x35, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70,
	0x6b, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x2f, 0x65, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x70, 0x2f, 0x6a, 0x6f, 0x62, 0x5f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x35, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x73, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x70,
	0x2f, 0x6c, 0x6f, 0x67, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x32, 0xa9, 0x01, 0x0a, 0x12, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x43,
	0x50, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x25, 0x0a, 0x0b, 0x48, 0x65, 0x61,
	0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x05, 0x2e, 0x50, 0x69, 0x6e, 0x67, 0x1a,
	0x0f, 0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x2f, 0x0a, 0x08, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x12, 0x10, 0x2e, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11,
	0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x47, 0x65, 0x74, 0x4a, 0x6f, 0x62, 0x12, 0x06, 0x2e, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x1a, 0x04, 0x2e, 0x4a, 0x6f, 0x62, 0x12, 0x23, 0x0a, 0x09, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x4c, 0x6f, 0x67, 0x12, 0x07, 0x2e, 0x4a, 0x6f, 0x62, 0x4c, 0x6f, 0x67, 0x1a,
	0x0b, 0x2e, 0x4c, 0x6f, 0x67, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x28, 0x01, 0x42, 0x2e,
	0x5a, 0x2c, 0x6f, 0x63, 0x74, 0x61, 0x76, 0x69, 0x75, 0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x73, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x70, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var file_internal_pkg_protofiles_executor_cp_executor_cp_services_proto_goTypes = []interface{}{
	(*Ping)(nil),             // 0: Ping
	(*RegisterRequest)(nil),  // 1: RegisterRequest
	(*Start)(nil),            // 2: Start
	(*JobLog)(nil),           // 3: JobLog
	(*HealthResponse)(nil),   // 4: HealthResponse
	(*RegisterResponse)(nil), // 5: RegisterResponse
	(*Job)(nil),              // 6: Job
	(*LogSummary)(nil),       // 7: LogSummary
}
var file_internal_pkg_protofiles_executor_cp_executor_cp_services_proto_depIdxs = []int32{
	0, // 0: ExecutorCPServices.HealthCheck:input_type -> Ping
	1, // 1: ExecutorCPServices.Register:input_type -> RegisterRequest
	2, // 2: ExecutorCPServices.GetJob:input_type -> Start
	3, // 3: ExecutorCPServices.StreamLog:input_type -> JobLog
	4, // 4: ExecutorCPServices.HealthCheck:output_type -> HealthResponse
	5, // 5: ExecutorCPServices.Register:output_type -> RegisterResponse
	6, // 6: ExecutorCPServices.GetJob:output_type -> Job
	7, // 7: ExecutorCPServices.StreamLog:output_type -> LogSummary
	4, // [4:8] is the sub-list for method output_type
	0, // [0:4] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_internal_pkg_protofiles_executor_cp_executor_cp_services_proto_init() }
func file_internal_pkg_protofiles_executor_cp_executor_cp_services_proto_init() {
	if File_internal_pkg_protofiles_executor_cp_executor_cp_services_proto != nil {
		return
	}
	file_internal_pkg_protofiles_executor_cp_ping_message_proto_init()
	file_internal_pkg_protofiles_executor_cp_register_message_proto_init()
	file_internal_pkg_protofiles_executor_cp_job_message_proto_init()
	file_internal_pkg_protofiles_executor_cp_log_message_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_internal_pkg_protofiles_executor_cp_executor_cp_services_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_internal_pkg_protofiles_executor_cp_executor_cp_services_proto_goTypes,
		DependencyIndexes: file_internal_pkg_protofiles_executor_cp_executor_cp_services_proto_depIdxs,
	}.Build()
	File_internal_pkg_protofiles_executor_cp_executor_cp_services_proto = out.File
	file_internal_pkg_protofiles_executor_cp_executor_cp_services_proto_rawDesc = nil
	file_internal_pkg_protofiles_executor_cp_executor_cp_services_proto_goTypes = nil
	file_internal_pkg_protofiles_executor_cp_executor_cp_services_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ExecutorCPServicesClient is the client API for ExecutorCPServices service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ExecutorCPServicesClient interface {
	HealthCheck(ctx context.Context, in *Ping, opts ...grpc.CallOption) (*HealthResponse, error)
	Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error)
	GetJob(ctx context.Context, in *Start, opts ...grpc.CallOption) (*Job, error)
	StreamLog(ctx context.Context, opts ...grpc.CallOption) (ExecutorCPServices_StreamLogClient, error)
}

type executorCPServicesClient struct {
	cc grpc.ClientConnInterface
}

func NewExecutorCPServicesClient(cc grpc.ClientConnInterface) ExecutorCPServicesClient {
	return &executorCPServicesClient{cc}
}

func (c *executorCPServicesClient) HealthCheck(ctx context.Context, in *Ping, opts ...grpc.CallOption) (*HealthResponse, error) {
	out := new(HealthResponse)
	err := c.cc.Invoke(ctx, "/ExecutorCPServices/HealthCheck", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *executorCPServicesClient) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error) {
	out := new(RegisterResponse)
	err := c.cc.Invoke(ctx, "/ExecutorCPServices/Register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *executorCPServicesClient) GetJob(ctx context.Context, in *Start, opts ...grpc.CallOption) (*Job, error) {
	out := new(Job)
	err := c.cc.Invoke(ctx, "/ExecutorCPServices/GetJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *executorCPServicesClient) StreamLog(ctx context.Context, opts ...grpc.CallOption) (ExecutorCPServices_StreamLogClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ExecutorCPServices_serviceDesc.Streams[0], "/ExecutorCPServices/StreamLog", opts...)
	if err != nil {
		return nil, err
	}
	x := &executorCPServicesStreamLogClient{stream}
	return x, nil
}

type ExecutorCPServices_StreamLogClient interface {
	Send(*JobLog) error
	CloseAndRecv() (*LogSummary, error)
	grpc.ClientStream
}

type executorCPServicesStreamLogClient struct {
	grpc.ClientStream
}

func (x *executorCPServicesStreamLogClient) Send(m *JobLog) error {
	return x.ClientStream.SendMsg(m)
}

func (x *executorCPServicesStreamLogClient) CloseAndRecv() (*LogSummary, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(LogSummary)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ExecutorCPServicesServer is the server API for ExecutorCPServices service.
type ExecutorCPServicesServer interface {
	HealthCheck(context.Context, *Ping) (*HealthResponse, error)
	Register(context.Context, *RegisterRequest) (*RegisterResponse, error)
	GetJob(context.Context, *Start) (*Job, error)
	StreamLog(ExecutorCPServices_StreamLogServer) error
}

// UnimplementedExecutorCPServicesServer can be embedded to have forward compatible implementations.
type UnimplementedExecutorCPServicesServer struct {
}

func (*UnimplementedExecutorCPServicesServer) HealthCheck(context.Context, *Ping) (*HealthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (*UnimplementedExecutorCPServicesServer) Register(context.Context, *RegisterRequest) (*RegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (*UnimplementedExecutorCPServicesServer) GetJob(context.Context, *Start) (*Job, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetJob not implemented")
}
func (*UnimplementedExecutorCPServicesServer) StreamLog(ExecutorCPServices_StreamLogServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamLog not implemented")
}

func RegisterExecutorCPServicesServer(s *grpc.Server, srv ExecutorCPServicesServer) {
	s.RegisterService(&_ExecutorCPServices_serviceDesc, srv)
}

func _ExecutorCPServices_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Ping)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExecutorCPServicesServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ExecutorCPServices/HealthCheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExecutorCPServicesServer).HealthCheck(ctx, req.(*Ping))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExecutorCPServices_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExecutorCPServicesServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ExecutorCPServices/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExecutorCPServicesServer).Register(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExecutorCPServices_GetJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Start)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExecutorCPServicesServer).GetJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ExecutorCPServices/GetJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExecutorCPServicesServer).GetJob(ctx, req.(*Start))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExecutorCPServices_StreamLog_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ExecutorCPServicesServer).StreamLog(&executorCPServicesStreamLogServer{stream})
}

type ExecutorCPServices_StreamLogServer interface {
	SendAndClose(*LogSummary) error
	Recv() (*JobLog, error)
	grpc.ServerStream
}

type executorCPServicesStreamLogServer struct {
	grpc.ServerStream
}

func (x *executorCPServicesStreamLogServer) SendAndClose(m *LogSummary) error {
	return x.ServerStream.SendMsg(m)
}

func (x *executorCPServicesStreamLogServer) Recv() (*JobLog, error) {
	m := new(JobLog)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _ExecutorCPServices_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ExecutorCPServices",
	HandlerType: (*ExecutorCPServicesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HealthCheck",
			Handler:    _ExecutorCPServices_HealthCheck_Handler,
		},
		{
			MethodName: "Register",
			Handler:    _ExecutorCPServices_Register_Handler,
		},
		{
			MethodName: "GetJob",
			Handler:    _ExecutorCPServices_GetJob_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamLog",
			Handler:       _ExecutorCPServices_StreamLog_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "internal/pkg/protofiles/executor_cp/executor_cp_services.proto",
}
